// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	modelos "api/src/models"

	mock "github.com/stretchr/testify/mock"
)

// PublicacaoRepository is an autogenerated mock type for the PublicacaoRepository type
type PublicacaoRepository struct {
	mock.Mock
}

// AtualizarPublicacao provides a mock function with given fields: publicacao, publicacaoID
func (_m *PublicacaoRepository) AtualizarPublicacao(publicacao modelos.Publicacao, publicacaoID uint64) error {
	ret := _m.Called(publicacao, publicacaoID)

	var r0 error
	if rf, ok := ret.Get(0).(func(modelos.Publicacao, uint64) error); ok {
		r0 = rf(publicacao, publicacaoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BuscarPublicacaoID provides a mock function with given fields: publicacaoId
func (_m *PublicacaoRepository) BuscarPublicacaoID(publicacaoId uint64) (modelos.Publicacao, error) {
	ret := _m.Called(publicacaoId)

	var r0 modelos.Publicacao
	if rf, ok := ret.Get(0).(func(uint64) modelos.Publicacao); ok {
		r0 = rf(publicacaoId)
	} else {
		r0 = ret.Get(0).(modelos.Publicacao)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(publicacaoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuscarPublicacoes provides a mock function with given fields: usuarioID
func (_m *PublicacaoRepository) BuscarPublicacoes(usuarioID uint64) ([]modelos.Publicacao, error) {
	ret := _m.Called(usuarioID)

	var r0 []modelos.Publicacao
	if rf, ok := ret.Get(0).(func(uint64) []modelos.Publicacao); ok {
		r0 = rf(usuarioID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]modelos.Publicacao)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(usuarioID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuscarPublicacoesUsuario provides a mock function with given fields: usuarioID
func (_m *PublicacaoRepository) BuscarPublicacoesUsuario(usuarioID uint64) ([]modelos.Publicacao, error) {
	ret := _m.Called(usuarioID)

	var r0 []modelos.Publicacao
	if rf, ok := ret.Get(0).(func(uint64) []modelos.Publicacao); ok {
		r0 = rf(usuarioID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]modelos.Publicacao)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(usuarioID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CriarPublicacao provides a mock function with given fields: publicacao
func (_m *PublicacaoRepository) CriarPublicacao(publicacao modelos.Publicacao) (uint64, error) {
	ret := _m.Called(publicacao)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(modelos.Publicacao) uint64); ok {
		r0 = rf(publicacao)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(modelos.Publicacao) error); ok {
		r1 = rf(publicacao)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Curtir provides a mock function with given fields: publicacaoID
func (_m *PublicacaoRepository) Curtir(publicacaoID uint64) error {
	ret := _m.Called(publicacaoID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(publicacaoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletarPublicacao provides a mock function with given fields: publicacaoID
func (_m *PublicacaoRepository) DeletarPublicacao(publicacaoID uint64) error {
	ret := _m.Called(publicacaoID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(publicacaoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Descurtir provides a mock function with given fields: publicacaoID
func (_m *PublicacaoRepository) Descurtir(publicacaoID uint64) error {
	ret := _m.Called(publicacaoID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(publicacaoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

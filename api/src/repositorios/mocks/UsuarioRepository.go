// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	modelos "api/src/models"

	mock "github.com/stretchr/testify/mock"
)

// UsuarioRepository is an autogenerated mock type for the UsuarioRepository type
type UsuarioRepository struct {
	mock.Mock
}

// AtualizarSenha provides a mock function with given fields: usuarioId, senhaComHash
func (_m *UsuarioRepository) AtualizarSenha(usuarioId uint64, senhaComHash string) error {
	ret := _m.Called(usuarioId, senhaComHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, string) error); ok {
		r0 = rf(usuarioId, senhaComHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AtualizarUser provides a mock function with given fields: usuario, id
func (_m *UsuarioRepository) AtualizarUser(usuario modelos.Usuario, id uint64) error {
	ret := _m.Called(usuario, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(modelos.Usuario, uint64) error); ok {
		r0 = rf(usuario, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BuscaQuemSegue provides a mock function with given fields: usuarioId
func (_m *UsuarioRepository) BuscaQuemSegue(usuarioId uint64) ([]modelos.Usuario, error) {
	ret := _m.Called(usuarioId)

	var r0 []modelos.Usuario
	if rf, ok := ret.Get(0).(func(uint64) []modelos.Usuario); ok {
		r0 = rf(usuarioId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]modelos.Usuario)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(usuarioId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuscarPorEmail provides a mock function with given fields: email
func (_m *UsuarioRepository) BuscarPorEmail(email string) (modelos.Usuario, error) {
	ret := _m.Called(email)

	var r0 modelos.Usuario
	if rf, ok := ret.Get(0).(func(string) modelos.Usuario); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(modelos.Usuario)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuscarSeguidores provides a mock function with given fields: usuarioID
func (_m *UsuarioRepository) BuscarSeguidores(usuarioID uint64) ([]modelos.Usuario, error) {
	ret := _m.Called(usuarioID)

	var r0 []modelos.Usuario
	if rf, ok := ret.Get(0).(func(uint64) []modelos.Usuario); ok {
		r0 = rf(usuarioID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]modelos.Usuario)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(usuarioID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuscarSenha provides a mock function with given fields: usuarioId
func (_m *UsuarioRepository) BuscarSenha(usuarioId uint64) (string, error) {
	ret := _m.Called(usuarioId)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint64) string); ok {
		r0 = rf(usuarioId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(usuarioId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuscarUser provides a mock function with given fields: nomeOuNick
func (_m *UsuarioRepository) BuscarUser(nomeOuNick string) ([]modelos.Usuario, error) {
	ret := _m.Called(nomeOuNick)

	var r0 []modelos.Usuario
	if rf, ok := ret.Get(0).(func(string) []modelos.Usuario); ok {
		r0 = rf(nomeOuNick)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]modelos.Usuario)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nomeOuNick)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuscarUserId provides a mock function with given fields: id
func (_m *UsuarioRepository) BuscarUserId(id uint64) (modelos.Usuario, error) {
	ret := _m.Called(id)

	var r0 modelos.Usuario
	if rf, ok := ret.Get(0).(func(uint64) modelos.Usuario); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(modelos.Usuario)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CriarUser provides a mock function with given fields: usuario
func (_m *UsuarioRepository) CriarUser(usuario modelos.Usuario) (uint64, error) {
	ret := _m.Called(usuario)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(modelos.Usuario) uint64); ok {
		r0 = rf(usuario)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(modelos.Usuario) error); ok {
		r1 = rf(usuario)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletarUser provides a mock function with given fields: id
func (_m *UsuarioRepository) DeletarUser(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParaDeSeguir provides a mock function with given fields: usuarioID, seguidorID
func (_m *UsuarioRepository) ParaDeSeguir(usuarioID uint64, seguidorID uint64) error {
	ret := _m.Called(usuarioID, seguidorID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(usuarioID, seguidorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Seguir provides a mock function with given fields: usuarioID, seguidorID
func (_m *UsuarioRepository) Seguir(usuarioID uint64, seguidorID uint64) error {
	ret := _m.Called(usuarioID, seguidorID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(usuarioID, seguidorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
